#!/bin/bash

function error_exit {
	echo "$(basename $0): ${1:-"Unknown Error"}" 1>&2
	exit 1
}

SPLREPO="https://api.github.com/repos/zfsonlinux/spl/tarball"
ZFSREPO="https://api.github.com/repos/zfsonlinux/zfs/tarball"

. /usr/share/coreos/release
. /usr/share/coreos/update.conf
. /etc/coreos/update.conf

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BUILDROOT="$DIR/build"
DEVREPO="http://${GROUP:-stable}.release.core-os.net/$COREOS_RELEASE_BOARD/$COREOS_RELEASE_VERSION/coreos_developer_container.bin.bz2"
DEVENV="$DIR/coreos_developer_container.bin"
VERSION="corezfs_${COREOS_RELEASE_BOARD}_${COREOS_RELEASE_VERSION}_${GROUP:-stable}"
ARCHIVE="${2:-${DIR}/${VERSION}.tar.gz}"

function prepare_build_script {
	echo "Preparing build script"
	cat > ${BUILDROOT}/opt/usr/local/sbin/build-zfs.sh <<-"EOF"
	#!/bin/bash

	function error_exit
	{
		echo "$(basename $0): ${1:-"Unknown Error"}" 1>&2
		exit 1
	}

	emerge-gitclone \
	&& (. /usr/share/coreos/release; \
	git -C /var/lib/portage/coreos-overlay checkout build-${COREOS_RELEASE_VERSION%%.*}) \
	||	error_exit "$LINENO: Error installing emerge-gitclone"

	emerge -gKv coreos-sources \
	&& gzip -cd /proc/config.gz > /usr/src/linux/.config \
	&& make -C /usr/src/linux modules_prepare \
	|| error_exit "$LINENO: Error installing coreos-sources"

	emerge sys-devel/automake sys-devel/autoconf sys-devel/libtool \
	|| error_exit "$LINENO: Error installing development tools"

	mkdir spl \
	&& curl -L "$SPLREPO" \
	| tar -zxv -C spl --strip-components=1 \
	|| error_exit "$LINENO: Error cloning spl repository"
	cd spl
	./autogen.sh || error_exit "$LINENO: Error running autogen.sh for spl"
	./configure || error_exit "$LINENO: Error configuring spl"
	make -j$(nproc) || error_exit "$LINENO: Error making spl"
	make install || error_exit "$LINENO: Error installing spl"
	cd ../
	mkdir zfs \
	&& curl -L "$ZFSREPO" \
	| tar -zxv -C zfs --strip-components=1 \
	|| error_exit "$LINENO: Error cloning zfs repository"
	cd zfs
	./autogen.sh || error_exit "$LINENO: Error running autogen.sh for zfs"
	./configure \
		--disable-sysvinit \
		--with-systemdunitdir=/usr/local/etc/systemd/system \
		--with-systemdpresetdir=/usr/local/etc/systemd/system-preset \
	|| error_exit "$LINENO: Error configuring zfs"
	make -j$(nproc) || error_exit "$LINENO: Error making zfs"
	make install || error_exit "$LINENO: Error installing zfs"
	EOF
	chmod +x ${BUILDROOT}/opt/usr/local/sbin/build-zfs.sh
}

function delete_build_script {
	echo "Deleting build script"
	rm -f ${BUILDROOT}/usr/local/sbin/build-zfs.sh
}

function download_dev_env {
	echo "Downloading development environment"
	if [ ! -e "$DEVENV" ]; then	
		gpg2 --keyserver pgp.mit.edu --recv-keys 48F9B96A2E16137F && \
		curl -L "$DEVREPO" | tee >(bzip2 -d > "$DEVENV") | gpg2 --verify <(curl -Ls "${DEVREPO}.sig") - \
		|| error_exit "$LINENO: Error downloading coreos_developer_container from $DEVREPO"
	fi
}

function launch_dev_env {
	echo "Launching development container"
	sudo systemd-nspawn \
		--ephemeral \
		--tmpfs=/usr/src \
		--chdir=/usr/src \
		--bind="$BUILDROOT/opt/usr/local:/usr/local" \
		--overlay="/lib/modules:$BUILDROOT/opt/usr/local/lib/modules:/lib/modules" \
		--image="$DEVENV" \
		--setenv="SPLREPO=$SPLREPO" \
		--setenv="ZFSREPO=$ZFSREPO" \
		build-zfs.sh \
		|| error_exit "$LINENO: Error running development container"
}

function create_systemd_units {
	echo "Creating Systemd Unit Files"
	cat > ${BUILDROOT}/opt/usr/local/etc/systemd/system/lib-modules.mount <<-EOF
	[Unit]
	Description=ZFS Kernel Modules
	ConditionPathExists=/opt/usr/local/lib/modules
	Before=zfs.service

	[Mount]
	Type=overlay
	What=overlay
	Where=/lib/modules
	Options=lowerdir=/lib/modules,upperdir=/opt/usr/local/lib/modules,workdir=/opt/usr/local/lib/.modules.wd

	[Install]
	WantedBy=zfs.service
	EOF

	cat > ${BUILDROOT}/opt/usr/local/etc/systemd/system/usr-local.mount <<-EOF
	[Unit]
	Description=ZFS User Tools
	ConditionPathExists=/opt/usr/local
	Before=zfs.service

	[Mount]
	Type=overlay
	What=overlay
	Where=/usr/local
	Options=lowerdir=/usr/local,upperdir=/opt/usr/local,workdir=/opt/usr/.local.wd

	[Install]
	WantedBy=zfs.target
	EOF

	cat > ${BUILDROOT}/opt/usr/local/etc/systemd/system/zfs.service <<-EOF
	[Unit]
	Description=ZFS Kernel Modules
	Before=zfs-import-cache.service
	Before=zfs-import-scan.service
	Before=zed.service
	Before=zfs-mount.service
	Before=zfs-share.service
	Before=zfs-zed.service

	[Service]
	Type=oneshot
	RemainAfterExit=yes
	ExecStart=/usr/sbin/modprobe zfs

	[Install]
	WantedBy=zfs.target
	EOF

	cat > ${BUILDROOT}/opt/usr/local/etc/systemd/system-preset/40-overlays.preset <<-EOF
	enable usr-local.mount
	enable lib-modules.mount
	enable zfs.service
	EOF
}

case "$1" in
	build)
		echo "Building ZFS on Linux (ZoL) for CoreOS ($VERSION)"
		[ "$EUID" -eq 0 ] || error_exit "Script must be run as root"
		
		rm -rf ${BUILDROOT}		
		mkdir -p ${BUILDROOT}/{opt/usr/{local/{lib/{modules,.modules.wd},etc,sbin},.local.wd},etc/systemd/{system,system-preset}} \
		|| error_exit "$LINENO: Error creating overlay directories"
		prepare_build_script
		download_dev_env
		launch_dev_env
		delete_build_script
		create_systemd_units
		
		(cd "$BUILDROOT"/opt/usr/local/etc/systemd/system && ls) \
		| xargs -I {} sudo ln -s /opt/usr/local/etc/systemd/system/{} "$BUILDROOT"/etc/systemd/system/ \
		|| error_exit "$LINENO: Error creating links to systemd unit files"
		
		(cd "$BUILDROOT"/opt/usr/local/etc/systemd/system-preset && ls) \
		| xargs -I {} sudo ln -s /opt/usr/local/etc/systemd/system-preset/{} "$BUILDROOT"/etc/systemd/system-preset/ \
		|| error_exit "$LINENO: Error creating links to systemd preset files"
		
		(cd "$BUILDROOT" && tar -zcvf "${ARCHIVE}" *)
		cat <<-EOF
		Finished Building ZFS on Linux (ZoL) for CoreOS ($VERSION)
		Archive file: $ARCHIVE
		Run 'sudo rm -rf $BUILDROOT' to delete the temporary build directory
		EOF
		;;
	install)
		echo "Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)"
		[ "$EUID" -eq 0 ] || error_exit "Script must be run as root"
		
		[ -e "$ARCHIVE" ] || error_exit "$LINENO: Error can't find archive: $ARCHIVE"
		tar -zxvf "$ARCHIVE" -C / || error_exit "$LINENO: Error extracting $ARCHIVE"
		
		systemctl daemon-reload \
		&& systemctl start lib-modules.mount usr-local.mount \
		|| error_exit "$LINENO: Error mounting overlays}"
		
		ldconfig || error_exit "$LINENO: Error reloading shared libraries"
		depmod || error_exit "$LINENO: Error running depmod"
		
		(cd /opt/usr/local/etc/systemd/system; ls) | xargs systemctl preset \
		|| error_exit "$LINENO: Error presetting systemd zfs units"

		systemctl start zfs.target || error_exit "$LINENO: Error starting zfs.target systemd unit"
		echo "Finished Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)"
		;;
	*)
		cat <<-"EOF"
		# corezfs - Download, build, and install ZFS on Linux (ZoL) for CoreOS

		This script is available from https://github.com/varasys/corezfs and should be
		run on a fresh CoreOS install. It should work for all CoreOS architectures and
		versions and all CoreOS updated channels (ie. stable, beta and alpha).

		## Usage:
		    sudo ./corezfs build [archive_file]
				Build zfs and create an archive file, optionally specifying the
				file name, which can be used to transfer the build artifacts to
				another computer.
	   
		    sudo ./corezfs install [archive_file]
				Install zfs (after building it) using the optional archive_file.
				If no archive_file is specified, the default archive-file name
				based on the currently running CoreOS version will be used. The form
				of the archive name is:
				    corezfs-<architucture>-<version>-<update_channel>.tar.gz
		
		Full installation is seperated into two steps, build then install, so the
		script may be used to either build and install directly onto a single machine,
		or to build on a development machine, and then install on multiple target
		machines.
		EOF
		;;
esac
