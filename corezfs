#!/usr/bin/env bash

version="v0.1.1"

yell() { echo "$(basename $0): $*" >&2; }
die() { yell "FATAL $*"; exit 111; }
try() { yell ${1}; shift; "$@" || die "ERROR executing: $*"; }


. /usr/share/coreos/release
. /usr/share/coreos/update.conf

VERSION="${COREOS_RELEASE_BOARD}_${COREOS_RELEASE_VERSION}_${GROUP:=stable}"
ARCHIVE="corezfs_${VERSION}.tar.gz"

read -d '' help_message <<-EOF

	corezfs (${version}) https://github.com/varasys/corezfs
	
	Bash script to build ZFS on Linux (ZoL) on CoreOS
	
	Usage:
	    corezfs build [archive_file]
	    corezfs install [archive_file]
	    corezfs -h | -v

	Options:
	    -h ) echo this help file to stdout
	    -v ) echo corezfs version to stdout	

	The build command will build zfs and create the archive file which is an
	overlay for the "/usr" filesystem. The default archive_file is
	"./${ARCHIVE}".
	
	The archive file can be used to install the zfs binaries on other systems
	instead of building it each time.

	The install command extracts the archive file to "/opt/corezfs", installs
	and enables a "zfs-overlay.service" systemd service which overlays
	"/opt/corezfs/usr" over the "/usr" directory, runs "systemctl preset-all"
	to enable the zfs services, runs "ldconfig", and "modprobe zfs".

	This is meant to be built and installed on a clean CoreOS instance.
EOF

while getopts ":hv" flag; do
	case ${flag} in
		h ) echo "${help_message}"; exit 0;;
		v ) echo "${version}"; exit 0;;
		\? ) die "Invalid option: -${OPTARG}";;
	esac
done
shift $((OPTIND-1))

[ ${EUID} -eq 0 ] || die "must be run as root user"

read -d '' build_script <<-'EOF'
	#!/usr/bin/env bash

	yell() { echo "$(basename $0): $*" >&2; }
	die() { yell "FATAL $*"; exit 111; }
	try() { mesg=${1}; yell ${mesg}; shift; "$@" || die "ERROR executing: $*"; }
	
	try "creating /usr/local/src" \
		mkdir -p /usr/local/src && cd /usr/local/src

	try "sourcing /usr/share/coreos/release" \
		. /usr/share/coreos/release

	try "emerging gitclone" \
		emerge-gitclone

	try "checking out coreos-overlay" \
		git -C /var/lib/portage/coreos-overlay checkout build-${COREOS_RELEASE_VERSION%%.*}

	try "emerging coreos-sources" \
		emerge -gKv coreos-sources
	
	try "copying /proc/config.gz to /usr/src/linux/.config" \
		gzip -cd /proc/config.gz > /usr/src/linux/.config
	
	try "preparing modules" \
		make -C /usr/src/linux modules_prepare

	try "emenging development tools" \
		emerge sys-devel/automake sys-devel/autoconf sys-devel/libtool

	trap "{ rm -rf /host/usr/local/src; }" EXIT
	try "creating src directories" \
		mkdir -p /host/usr/local/src/{spl,zfs}
	
	(
		cd /host/usr/local/src/spl
		try "fetching spl source code" curl -L "${CZ_SPLREPO}" | tar -zxv --strip-components=1
		try "running autogen.sh for spl" ./autogen.sh
		try "configuring spl" ./configure
		try "making spl" make -j$(nproc)
		try "installing spl" make DESTDIR=/host INSTALL_MOD_PATH=/host install
	) || exit $?
	(
		cd /host/usr/local/src/zfs
		try "fetching zfs source code" curl -L "${CZ_ZFSREPO}" | tar -zxv --strip-components=1
		try "running autogen.sh for zfs" ./autogen.sh
		try "configuring zfs" ./configure --disable-sysvinit
		try "making zfs" make -j$(nproc)
		try "installing zfs" make DESTDIR=/host install
	) || exit $?
	
	try "running depmod" chroot /host depmod
	try "running ldconfig" chroot /host ldconfig -v

	yell "Creating Systemd Unit Files"
	cat > /host/usr/lib64/systemd/system/zfs-overlay.service <<-EOF2
		[Unit]
		Description=CoreZFS usr overlay
		Before=local-fs.target
		ConditionPathExists=/opt/corezfs/usr

		[Service]
		Type=oneshot
		ExecStart=/usr/bin/mount -t overlay overlay -o lowerdir=/usr:/opt/corezfs/usr /usr

		[Install]
		WantedBy=local-fs.target
	EOF2
	cat > /host/usr/lib64/systemd/system-preset/30-corezfs.preset <<-EOF2
		enable zfs-overlay.service
	EOF2
	bash --login
EOF

case "$1" in
	build)
		yell "Building ZFS on Linux (ZoL) for CoreOS ($VERSION)"

		try "creating build directory ${CZ_BUILD_DIR:=${2:-"/opt/corezfs_build"}}" \
			mkdir -p ${CZ_BUILD_DIR} && CZ_BUILD_DIR=$(cd ${CZ_BUILD_DIR}; pwd)
		try "creating overlay directory ${CZ_OVERLAY_DIR:=${CZ_BUILD_DIR}/overlay}" \
			mkdir -p ${CZ_OVERLAY_DIR}/opt/corezfs && CZ_OVERLAY_DIR=$(cd ${CZ_OVERLAY_DIR}; pwd)

		try "preparing build script" \
			echo "${build_script}" > "${CZ_OVERLAY_DIR}/opt/corezfs/build-zfs.sh"
		try "setting build script executable" \
			chmod +x "${CZ_OVERLAY_DIR}/opt/corezfs/build-zfs.sh"
		
		DEVENV="coreos_${VERSION}.bin"
		if [ ! -r "${CZ_BUILD_DIR}/${DEVENV}" ]; then
			try "refreshing CoreOS signing key" \
				gpg2 --keyserver pgp.mit.edu --recv-keys 50E0885593D2DCB4

			if [ ! -r "${CZ_BUILD_DIR}/${DEVENV}.bz2" ]; then
				DEVREPO="https://${GROUP}.release.core-os.net/${COREOS_RELEASE_BOARD}/${COREOS_RELEASE_VERSION}/coreos_developer_container.bin.bz2"
				try "downloading CoreOS development container" \
					curl -L "${DEVREPO}" > "${CZ_BUILD_DIR}/${DEVENV}.bz2"
			fi

			try "verifying development container signature" \
				gpg2 --verify <(try "downloading signature" curl -L "${DEVREPO}.sig") "${CZ_BUILD_DIR}/${DEVENV}.bz2"

			try "decompressing development container (this may take awhile)" \
				bunzip2 -fv "${CZ_BUILD_DIR}/${DEVENV}.bz2" > "${CZ_BUILD_DIR}/${DEVENV}"
		fi

		(
			cd "${CZ_BUILD_DIR}"
			try "allocating swap file" fallocate -l 1024m swap
			try "setting swap file permissions" chmod 600 swap
			try "initializing swap file" mkswap swap
			try "activating swap" swapon swap
			trap "{ swapoff ${CZ_BUILD_DIR}/swap && rm ${CZ_BUILD_DIR}/swap; }" EXIT

			try "launching development container" \
				systemd-nspawn \
					--image="${DEVENV}" \
					--ephemeral \
					--setenv="CZ_SPLREPO=${CZ_SPLREPO:=https://api.github.com/repos/zfsonlinux/spl/tarball}" \
					--setenv="CZ_ZFSREPO=${CZ_ZFSREPO:=https://api.github.com/repos/zfsonlinux/zfs/tarball}" \
					--overlay="/lib/modules::/lib/modules" \
					--overlay="/:${CZ_OVERLAY_DIR}/opt/corezfs:/host" \
					--overlay="/usr:${CZ_OVERLAY_DIR}/opt/corezfs/usr:/host/usr" \
					--as-pid2 \
					/host/build-zfs.sh			
		) || exit $?

		
		try "creating ${ARCHIVE} tarball" \
			tar -zcvf "${ARCHIVE}" -C "${CZ_OVERLAY_DIR}" opt/corezfs/usr

		try "cleaning up temporary build directories" \
			rm -rf "${CZ_BUILD_DIR}" "${CZ_OVERLAY_DIR}"

		cat >&2 <<-EOF
			
			Finished Building ZFS on Linux (ZoL) for CoreOS ($VERSION)
			
			Archive file: ${ARCHIVE}
			
			Run "corezfs install ${ARCHIVE}" to install
		EOF
		;;
	install)
		yell "Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)"

		[ ${2} ] && ARCHIVE=${2}
		try "extracting ${ARCHIVE}" \
			tar -zxvf ${ARCHIVE} -C /
		try "copying zfs-overlay.service to /etc/systemd/system" \
			cp /opt/corezfs/usr/lib64/systemd/system/zfs-overlay.service /etc/systemd/system/
		try "enabling zfs-overlay.service" \
			systemctl enable --now zfs-overlay.service
		try "presetting systemd units" \
			systemctl preset-all --now
		try "running ldconfig" \
			ldconfig -v

		cat >&2 <<-EOF
			
			Finished Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)
		EOF
		;;
	*)
		die "unknown sub-command \"${1}\" (run \"$(basename ${0}) -h\" for help)"
		;;
esac