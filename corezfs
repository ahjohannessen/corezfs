#!/bin/bash

version="v0.1.1"

SPLREPO="https://api.github.com/repos/zfsonlinux/spl/tarball"
ZFSREPO="https://api.github.com/repos/zfsonlinux/zfs/tarball"

function log_entry { echo "${1}" 1>&2; [ ! "${2}" ] || exit ${2}; }
function log_error { log_entry "Error: ${1}" "${2}"; }
function debug { log_entry "$(set -o posix ; set | sort)"; }

[ "${EUID}" -eq 0 ] || log_error "$(basename ${0}) must be run as root" 1

. /usr/share/coreos/release || log_error "failed to source /usr/share/coreos/release file" 1
. /usr/share/coreos/update.conf || log_error "failed to source /usr/share/coreos/update.conf" 1

DIR="$(pwd)"
BUILDROOT="${DIR}/build"
VERSION="${COREOS_RELEASE_BOARD}_${COREOS_RELEASE_VERSION}_${GROUP:=stable}"
DEVREPO="https://${GROUP}.release.core-os.net/${COREOS_RELEASE_BOARD}/${COREOS_RELEASE_VERSION}/coreos_developer_container.bin.bz2"
DEVENV="${DIR}/coreos_${VERSION}.bin"
ARCHIVE="corezfs_${VERSION}.tar.gz"

read -d '' help_message <<-EOF

	$(basename ${0}) (${version})
	    Bash script to build ZFS on Linux (ZoL) on CoreOS
	
	Usage:
	    $(basename ${0}) build
		$(basename ${0}) install
	
	the build command will build it.

	the install command will install it.
EOF

read -d '' build_script <<-'EOF'
	#!/usr/bin/env bash

	function log_entry { echo "${1}" 1>&2; [ ! "${2}" ] || exit ${2}; }
	function log_error { log_entry "Error: ${1}" "${2}"; }
	
	mkdir -p /usr/local/src
	cd /usr/local/src

	emerge-gitclone \
	&& (. /usr/share/coreos/release; \
	git -C /var/lib/portage/coreos-overlay checkout build-${COREOS_RELEASE_VERSION%%.*}) \
	|| log_error "$LINENO: Error installing emerge-gitclone" 1

	emerge -gKv coreos-sources \
	&& gzip -cd /proc/config.gz > /usr/src/linux/.config \
	&& make -C /usr/src/linux modules_prepare \
	|| log_error "$LINENO: Error installing coreos-sources" 1

	emerge sys-devel/automake sys-devel/autoconf sys-devel/libtool \
	|| log_error "$LINENO: Error installing development tools" 1

	mkdir spl \
	&& curl -L "$SPLREPO" \
	| tar -zxv -C spl --strip-components=1 \
	|| log_error "$LINENO: Error cloning spl repository" 1
	(cd spl;
	./autogen.sh || log_error "$LINENO: Error running autogen.sh for spl" 1
	./configure || log_error "$LINENO: Error configuring spl" 1
	make -j$(nproc) || log_error "$LINENO: Error making spl" 1)

	mkdir zfs \
	&& curl -L "$ZFSREPO" \
	| tar -zxv -C zfs --strip-components=1 \
	|| log_error "$LINENO: Error cloning zfs repository" 1
	(cd zfs;
	./autogen.sh || log_error "$LINENO: Error running autogen.sh for zfs" 1
	./configure \
		--disable-sysvinit \
	|| log_error "$LINENO: Error configuring zfs" 1
	make -j$(nproc) || log_error "$LINENO: Error making zfs" 1)
	ldconfig
	depmod

	(cd spl; DESTDIR=/host/corezfs make install || log_error "$LINENO: Error installing spl" 1)
	(cd zfs; DESTDIR=/host/corezfs make install || log_error "$LINENO: Error installing zfs" 1)
EOF

case "$1" in
	build)
		log_entry "Building ZFS on Linux (ZoL) for CoreOS ($VERSION)"
		
		log_entry "Creating build directory"
		rm -rf "${BUILDROOT}" && mkdir -p "${BUILDROOT}"/corezfs/usr/{lib64/modules,local/lib64,sbin} \
		&& ln -s lib64 "${BUILDROOT}/corezfs/lib" \
		&& ln -s usr/lib64 "${BUILDROOT}/corezfs/lib64" \
		&& ln -s lib64 "${BUILDROOT}/corezfs/usr/lib" \
		&& ln -s lib64 "${BUILDROOT}/corezfs/usr/local/lib" \
		&& ln -s usr/sbin "${BUILDROOT}/corezfs/sbin" \
		|| log_error "$LINENO: Error creating directory ${BUILDROOT}" 1
		
		log_entry "Preparing build script"
		echo "${build_script}" > "${BUILDROOT}/build-zfs.sh" \
		&& chmod +x "${BUILDROOT}/build-zfs.sh" \
		|| log_error "$LINENO: Error creating build script" 1
		
		if [ ! -r "${DEVENV}" ]; then
			log_entry "Refreshing CoreOS signing key"
			gpg2 --keyserver pgp.mit.edu --recv-keys 50E0885593D2DCB4 \
			|| log_error "Failed to update signing key" 1

			if [ ! -r "${DEVENV}.bz2" ]; then
				log_entry "Downloading development container"
				curl -L "${DEVREPO}" > "${DEVENV}.bz2" \
				|| log_error "Failed to download development container" 1
			fi

			log_entry "Verifying development container signature"
			(gpg2 --verify <(log_entry "Downloading development container signature"
				curl -L ${DEVREPO}.sig \
				|| log_error "Failed to download development container signature" 1) "${DEVENV}.bz2") \
			|| log_error "Development container signature verification failed for ${DEVENV}.bz2" 1
		
			log_entry "Decompressing development container"
			bunzip2 -fv "${DEVENV}.bz2" > "${DEVENV}" \
			|| log_error "Failed to decompress development container" 1
		fi

		log_entry "Creating swap file" # build fails sometimes with only 1GB RAM
		fallocate -l 1024m ${DIR}/swap \
		&& chmod 600 ${DIR}/swap \
		&& mkswap ${DIR}/swap \
		&& swapon ${DIR}/swap \
		&& trap "{ swapoff ${DIR}/swap && rm ${DIR}/swap \
			|| log_error 'Failed to deactivate swap'; }" EXIT \
		|| log_error "Error activating swap" 1

		log_entry "Launching development container"
		systemd-nspawn \
			--image="${DEVENV}" \
			--ephemeral \
			--setenv="SPLREPO=${SPLREPO}" \
			--setenv="ZFSREPO=${ZFSREPO}" \
			--overlay="/lib/modules:${BUILDROOT}/corezfs/usr/lib64/modules:/lib/modules" \
			--bind="${BUILDROOT}:/host" \
			--as-pid2 \
			/host/build-zfs.sh \
			|| log_error "$LINENO: Error running development container" 1
		
		log_entry "Creating Systemd Unit Files"
		cat > ${BUILDROOT}/corezfs/usr/lib64/systemd/system/zfs-overlay.service <<-EOF
			[Unit]
			Description=CoreZFS usr overlay
			After=usr.mount
			Before=local-fs.target
			ConditionPathExists=/opt/corezfs/usr

			[Service]
			Type=oneshot
			ExecStart=/usr/bin/mount -t overlay overlay -o lowerdir=/usr:/opt/corezfs/usr /usr

			[Install]
			WantedBy=usr.mount
		EOF
		
		log_entry "Creating ${ARCHIVE} tarball"
		(tar -zcvf "${ARCHIVE}" -C "$BUILDROOT" --xform=s,^,opt/, corezfs/usr) \
		|| log_entry "Failed to create tarball" 1

		cat <<-EOF
			Finished Building ZFS on Linux (ZoL) for CoreOS ($VERSION)
			Archive file: ${ARCHIVE}
			Run 'rm -rf ${BUILDROOT}' to delete the temporary build directory
			Run 'corezfs install ${ARCHIVE}' to install
		EOF
		;;
	install)
		echo "Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)"
		[ "$EUID" -eq 0 ] || error_exit "Script must be run as root"

		[ ${2} ] && ARCHIVE="${2}"
		tar -zxvf "$ARCHIVE" -C / || error_exit "$LINENO: Error extracting $ARCHIVE"
		
		cp /opt/corezfs/usr/lib64/systemd/system/zfs-overlay.service /etc/systemd/system/ \
		&& systemctl daemon-reload \
		&& systemctl enable --now zfs-overlay.service \
		&& systemctl daemon-reload \
		&& systemctl --preset-mode=enable preset-all \
		|| error_exit "$LINENO: Error mounting overlays}"

		echo "Finished Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)"
		;;
	*)
		cat <<-"EOF"
		# corezfs - Download, build, and install ZFS on Linux (ZoL) for CoreOS

		This script is available from https://github.com/varasys/corezfs and should be
		run on a fresh CoreOS install. It should work for all CoreOS architectures and
		versions and all CoreOS updated channels (ie. stable, beta and alpha).

		## Usage:
		    sudo ./corezfs build [archive_file]
				Build zfs and create an archive file, optionally specifying the
				file name, which can be used to transfer the build artifacts to
				another computer.
	   
		    sudo ./corezfs install [archive_file]
				Install zfs (after building it) using the optional archive_file.
				If no archive_file is specified, the default archive-file name
				based on the currently running CoreOS version will be used. The form
				of the archive name is:
				    corezfs-<architucture>-<version>-<update_channel>.tar.gz
		
		Full installation is seperated into two steps, build then install, so the
		script may be used to either build and install directly onto a single machine,
		or to build on a development machine, and then install on multiple target
		machines.
		EOF
		;;
esac