#!/bin/bash

version="v0.1.1"

. /usr/share/coreos/release || log_error "failed to source /usr/share/coreos/release file" 1
. /usr/share/coreos/update.conf || log_error "failed to source /usr/share/coreos/update.conf" 1

VERSION="${COREOS_RELEASE_BOARD}_${COREOS_RELEASE_VERSION}_${GROUP:=stable}"
ARCHIVE="corezfs_${VERSION}.tar.gz"

read -d '' help_message <<-EOF

	$(basename ${0}) (${version})
	    Bash script to build ZFS on Linux (ZoL) on CoreOS
	    https://github.com/varasys/corezfs
	
	Usage:
	    $(basename ${0}) build [archive_file]
	    $(basename ${0}) install [archive_file]

	The default archive_file is "./${ARCHIVE}".

	The build command will build zfs and create the archive file.

	The install command will install the archive to the currently running system.
EOF

function log_entry { echo ${1} 1>&2; [ ! ${2} ] || exit ${2}; }
function log_error { log_entry "Error: ${1}" ${2}; }

while getopts ":hv" flag; do
	case ${flag} in
		h ) log_entry "${help_message}" 0;;
		v ) log_entry "${version}" 0;;
		\? ) log_entry "Invalid option: -${OPTARG}" 1;;
	esac
done
shift $((OPTIND-1))

[ "${EUID}" -eq 0 ] || log_error "$(basename ${0}) must be run as root" 1

read -d '' build_script <<-'EOF'
	#!/usr/bin/env bash

	function log_entry { echo "${1}" 1>&2; [ ! "${2}" ] || bash --login; }
	function log_error { log_entry "Error: ${1}" "${2}"; }
	
	rm /lib/modules && ln -s /host/usr/lib64/modules /lib/modules

	mkdir -p /usr/local/src
	cd /usr/local/src

	emerge-gitclone \
	&& (. /usr/share/coreos/release; \
	git -C /var/lib/portage/coreos-overlay checkout build-${COREOS_RELEASE_VERSION%%.*}) \
	|| log_error "$LINENO: Error installing emerge-gitclone" 1

	emerge -gKv coreos-sources \
	&& gzip -cd /proc/config.gz > /usr/src/linux/.config \
	&& make -C /usr/src/linux modules_prepare \
	|| log_error "$LINENO: Error installing coreos-sources" 1

	emerge sys-devel/automake sys-devel/autoconf sys-devel/libtool \
	|| log_error "$LINENO: Error installing development tools" 1

	trap "{ rm -rf /host/usr/local/src/{spl,zfs} \
		|| log_error 'failed to delete /host/usr/local/src/{spl,zfs}'; }" EXIT

	mkdir -p /host/usr/local/src/{spl,zfs} \
	|| log_error "failed to create /host/usr/local/src/spl directory"
	(
		cd /host/usr/local/src/spl
		curl -L "${CZ_SPLREPO}" | tar -zxv --strip-components=1 \
		|| log_error "$LINENO: Error fetching spl repository" 1
		./autogen.sh || log_error "$LINENO: Error running autogen.sh for spl" 1
		./configure || log_error "$LINENO: Error configuring spl" 1
		make -j$(nproc) || log_error "$LINENO: Error making spl" 1
		make DESTDIR=/host install || log_error "$LINENO: Error installing spl" 1
	) || exit 1
	(
		cd /host/usr/local/src/zfs
		curl -L "${CZ_ZFSREPO}" | tar -zxv --strip-components=1 \
		|| log_error "$LINENO: Error fetching zfs repository" 1
		./autogen.sh || log_error "$LINENO: Error running autogen.sh for zfs" 1
		./configure \
			--disable-sysvinit \
		|| log_error "$LINENO: Error configuring zfs" 1
		make -j$(nproc) || log_error "$LINENO: Error making zfs" 1
		make DESTDIR=/host install || log_error "$LINENO: Error installing zfs" 1
	) || exit 1

	log_entry "Creating Systemd Unit Files"
	cat > /host/usr/lib64/systemd/system/zfs-overlay.service <<-EOF2
		[Unit]
		Description=CoreZFS usr overlay
		Before=local-fs.target
		ConditionPathExists=/opt/corezfs/usr

		[Service]
		Type=oneshot
		ExecStart=/usr/bin/mount -t overlay overlay -o lowerdir=/usr:/opt/corezfs/usr /usr

		[Install]
		WantedBy=local-fs.target
	EOF2

	cat > /host/usr/lib64/systemd/system-preset/30-corezfs.preset <<-EOF2
		enable zfs-overlay.service
	EOF2
EOF

case "$1" in
	build)
		log_entry "Building ZFS on Linux (ZoL) for CoreOS ($VERSION)"

		log_entry "Creating build directory"
		mkdir -p \
			${CZ_BUILD_DIR:=${2:-"/opt/corezfs_build"}} \
			${CZ_OVERLAY_DIR:=${CZ_BUILD_DIR}/overlay} \
		|| log_error "failed to create corezfs build directories" 1
		
		CZ_BUILD_DIR=$(cd ${CZ_BUILD_DIR}; pwd)
		CZ_OVERLAY_DIR=$(cd ${CZ_OVERLAY_DIR}; pwd)

		log_entry "Preparing build script"
		echo "${build_script}" > "${CZ_OVERLAY_DIR}/build-zfs.sh" \
		&& chmod +x "${CZ_OVERLAY_DIR}/build-zfs.sh" \
		|| log_error "failed to create build script" 1
		
		DEVENV="coreos_${VERSION}.bin"
		(
			cd ${CZ_BUILD_DIR}
			if [ ! -r "${DEVENV}" ]; then
				log_entry "Refreshing CoreOS signing key"
				gpg2 --keyserver pgp.mit.edu --recv-keys 50E0885593D2DCB4 \
				|| log_error "Failed to update signing key" 1

				if [ ! -r "${DEVENV}.bz2" ]; then
					log_entry "Downloading development container"
					DEVREPO="https://${GROUP}.release.core-os.net/${COREOS_RELEASE_BOARD}/${COREOS_RELEASE_VERSION}/coreos_developer_container.bin.bz2"
					curl -L "${DEVREPO}" > "${DEVENV}.bz2" \
					|| log_error "Failed to download development container" 1
				fi

				log_entry "Verifying development container signature"
				(gpg2 --verify <(log_entry "Downloading development container signature"
					curl -L ${DEVREPO}.sig \
					|| log_error "Failed to download development container signature" 1) "${DEVENV}.bz2") \
				|| log_error "Development container signature verification failed for ${DEVENV}.bz2" 1
			
				log_entry "Decompressing development container"
				bunzip2 -fv "${DEVENV}.bz2" > "${DEVENV}" \
				|| log_error "Failed to decompress development container" 1
			fi
		) || exit 1

		log_entry "Creating swap file" # build fails sometimes with only 1GB RAM
		fallocate -l 1024m ${CZ_BUILD_DIR}/swap \
		&& chmod 600 ${CZ_BUILD_DIR}/swap \
		&& mkswap ${CZ_BUILD_DIR}/swap \
		&& swapon ${CZ_BUILD_DIR}/swap \
		&& trap "{
			swapoff ${CZ_BUILD_DIR}/swap \
			&& rm ${CZ_BUILD_DIR}/swap \
			|| log_error 'Failed to deactivate swap'
		}" EXIT \
		|| log_error "Error activating swap" 1

		log_entry "Launching development container"
		systemd-nspawn \
			--image="${CZ_BUILD_DIR}/${DEVENV}" \
			--ephemeral \
			--setenv="CZ_SPLREPO=${CZ_SPLREPO:=https://api.github.com/repos/zfsonlinux/spl/tarball}" \
			--setenv="CZ_ZFSREPO=${CZ_ZFSREPO:=https://api.github.com/repos/zfsonlinux/zfs/tarball}" \
			--overlay="/:${CZ_OVERLAY_DIR}:/host" \
			--overlay="/usr:${CZ_OVERLAY_DIR}/usr:/host/usr" \
			--as-pid2 \
			/host/build-zfs.sh \
			|| log_error "$LINENO: Error running development container" 1
		
		log_entry "Creating ${ARCHIVE} tarball"
		(tar -zcvf "${ARCHIVE}" -C "${CZ_OVERLAY_DIR}" --xform=s,^,opt/corezfs/, usr) \
		|| log_entry "Failed to create tarball" 1

		cat <<-EOF
			Finished Building ZFS on Linux (ZoL) for CoreOS ($VERSION)
			Archive file: ${ARCHIVE}
			Run 'rm -rf ${CZ_BUILD_DIR}' to delete the temporary build directory
			Run 'corezfs install' to install
		EOF
		;;
	install)
		echo "Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)"

		[ ${2} ] && ARCHIVE=${2}
		tar -zxvf ${ARCHIVE} -C / || error_exit "$LINENO: Error extracting $ARCHIVE"
		
		cp /opt/corezfs/usr/lib64/systemd/system/zfs-overlay.service /etc/systemd/system/ \
		|| log_error "Error copying zfs-overlay.service unit file" 1
		systemctl enable --now zfs-overlay.service \
		|| log_error "Error enabling zfs-overlay.service unit file" 1
		systemctl preset-all \
		|| log_error "Error presetting zfs systemd services}"

		log_entry "Finished Installing ZFS on Linux (ZoL) for CoreOS ($VERSION)" 0
		;;
	*)
		log_entry "${help_message}" 1
		;;
esac